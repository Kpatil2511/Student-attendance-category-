import sqlite3
import tkinter as tk
from tkinter import messagebox

# Function to connect to SQLite database
def connect_db():
    conn = sqlite3.connect('student.db')#student.db is a database file 
    return conn

# Function to create Students table if not exists
def create_table(conn):
    cursor = conn.cursor()#this is helping me to execute sql queries in python code
    cursor.execute('''CREATE TABLE IF NOT EXISTS Students (
                    roll_no INT PRIMARY KEY,
                    name VARCHAR(50),
                    phone_number VARCHAR(15)
                )''')
    conn.commit()

# Function to add student to the database
def add_student(conn, roll_no, name, phone_number):
    cursor = conn.cursor()
    cursor.execute('''INSERT INTO Students (roll_no, name, phone_number) 
                      VALUES (?, ?, ?)''', (roll_no, name, phone_number))#? this is a placeholder which actually replaces all the corresponding tuples values
    conn.commit()
    messagebox.showinfo("Success", "Student added successfully.")

# Function to update student information
def update_student(conn, roll_no, new_phone_number):
    cursor = conn.cursor()
    cursor.execute('''UPDATE Students SET phone_number = ? WHERE roll_no = ?''', (new_phone_number, roll_no))
    conn.commit()
    return cursor.rowcount>0

# Function to delete student from the database
def delete_student(conn, roll_no):
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM Students WHERE roll_no = ?''', (roll_no,))
    conn.commit()
    return cursor.rowcount > 0

# Function to reset the dataset
def reset_dataset(conn):
    cursor = conn.cursor()
    cursor.execute('''DELETE FROM Students''')
    conn.commit()
    messagebox.showinfo("Success", "Dataset reset successfully.")

# Function to display all students
def display_students(conn):
    cursor = conn.cursor()
    cursor.execute('''SELECT * FROM Students''')
    students = cursor.fetchall()#It fetches all the results of the query and stores them in the students variable.
    if not students:
        messagebox.showinfo("Info", "No students found.")
    else:
        display_window = tk.Toplevel()
        display_window.title("Student Database")
        for i, student in enumerate(students):
            tk.Label(display_window, text=f"Roll No: {student[0]}, Name: {student[1]}, Phone Number: {student[2]}").grid(row=i, column=0, padx=10, pady=5)

# Function to handle submit button click event
def submit():
    roll_no = roll_no_entry.get()
    name = name_entry.get()
    phone_number = phone_entry.get()

    if not roll_no or not name or not phone_number:
        messagebox.showerror("Error", "Please fill in all fields.")
        return

    try:
        roll_no = int(roll_no)
    except ValueError:
        messagebox.showerror("Error", "Roll No must be an integer.")
        return
    
    if not phone_number.isdigit() or len(phone_number) != 10:
        messagebox.showerror("Error", "Phone Number must be a 10-digit integer.")
        return


    add_student(conn, roll_no, name, phone_number)
    clear_entries()

# Function to handle update button click event
def update():
    roll_no = roll_no_entry.get()
    new_phone_number = phone_entry.get()

    # Check if roll number and new phone number are empty
    if not roll_no or not new_phone_number:
        messagebox.showerror("Error", "Please fill in Roll No and New Phone Number.")
        return

    # Validate if roll number is an integer
    try:
        roll_no = int(roll_no)
    except ValueError:
        messagebox.showerror("Error", "Roll No must be an integer.")
        return

    # Attempt to update the student with the given roll number
    try:
        if update_student(conn, roll_no, new_phone_number):
            messagebox.showinfo("Success", "Student information updated successfully.")
            clear_entries()
        else:
            messagebox.showerror("Error", "No student found with the given Roll No.")
    except sqlite3.Error as e:
        messagebox.showerror("Error", f"Error occurred: {e}")

# Function to handle delete button click event
def delete():
    roll_no = roll_no_entry.get()

    # Check if roll number is empty
    if not roll_no:
        messagebox.showerror("Error", "Please fill in Roll No.")
        return

    # Validate if roll number is an integer
    try:
        roll_no = int(roll_no)
    except ValueError:
        messagebox.showerror("Error", "Roll No must be an integer.")
        return

    # Attempt to delete the student with the given roll number
    try:
        if delete_student(conn, roll_no):
            messagebox.showinfo("Success", "Student deleted successfully.")
            clear_entries()
        else:
            messagebox.showerror("Error", "No student found with the given Roll No.")
    except sqlite3.Error as e:
        messagebox.showerror("Error", f"Error occurred: {e}")

# Function to handle reset button click event
def reset():
    reset_dataset(conn)
    clear_entries()

# Function to clear entry fields
def clear_entries():
    roll_no_entry.delete(0, tk.END)
    name_entry.delete(0, tk.END)
    phone_entry.delete(0, tk.END)

# Main window
root = tk.Tk()
root.title("Student Management System")

# Connect to SQLite database
conn = connect_db()

# Create Students table if not exists
create_table(conn)

# Labels and entry fields
tk.Label(root, text="Roll No:").grid(row=0, column=0, padx=10, pady=5)
roll_no_entry = tk.Entry(root)
roll_no_entry.grid(row=0, column=1, padx=10, pady=5)

tk.Label(root, text="Name:").grid(row=1, column=0, padx=10, pady=5)
name_entry = tk.Entry(root)
name_entry.grid(row=1, column=1, padx=10, pady=5)

tk.Label(root, text="Phone Number:").grid(row=2, column=0, padx=10, pady=5)
phone_entry = tk.Entry(root)
phone_entry.grid(row=2, column=1, padx=10, pady=5)

# Buttons
tk.Button(root, text="Add Student", command=submit).grid(row=3, column=0, padx=10, pady=5)
tk.Button(root, text="Update Student", command=update).grid(row=3, column=1, padx=10, pady=5)
tk.Button(root, text="Delete Student", command=delete).grid(row=4, column=0, padx=10, pady=5)
tk.Button(root, text="Reset Dataset", command=reset).grid(row=4, column=1, padx=10, pady=5)
tk.Button(root, text="Display Students", command=lambda: display_students(conn)).grid(row=5, column=0, columnspan=2, padx=10, pady=5)

# Run the Tkinter event loop
root.mainloop()

# Close connection
conn.close()
